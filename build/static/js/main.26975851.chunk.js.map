{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","props","launch","mission_name","launch_date_local","launch_success","flight_number","className","classNames","format","to","MissionKey","EXCHANGE_RATES","gql","Launches","useQuery","loading","error","data","launches","map","key","LAUNCH_QUERY","Launch","useParams","console","log","parseInt","variables","launch_year","rocket","rocket_name","rocket_type","rocket_id","client","ApolloClient","uri","App","src","logo","alt","style","width","margin","display","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.26975851.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment'\r\nimport { Link } from 'react-router-dom';\r\nconst LaunchItem = (props) => {\r\n    const {mission_name, launch_date_local, launch_success, flight_number} = props.launch;\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: <span className={classNames({\r\n                        'text-success' : launch_success,\r\n                        'text-danger' : !launch_success\r\n                    })}>{mission_name}</span></h4>\r\n                    <p>Date:  <Moment format=\"yyyy-MM-DD HH:mm\">{launch_date_local}</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`}className=\"btn btn-secondary\">Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LaunchItem;","import React from 'react';\r\n\r\nconst MissionKey = () => {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MissionKey;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst EXCHANGE_RATES = gql`\r\n  {\r\n    launches{\r\n        flight_number,\r\n        launch_date_local,\r\n        launch_success,\r\n        mission_name\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launches = () => {\r\n    const { loading, error, data } = useQuery(EXCHANGE_RATES);\r\n  \r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n    return (\r\n        <>\r\n            <h1 className=\"display-4 my-3\">Launches</h1>\r\n            <MissionKey/>\r\n            {\r\n                data.launches.map(launch=> <LaunchItem key={launch.flight_number} launch={launch}/>)\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Launches;","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport classNames from 'classnames'\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n        flight_number\r\n        mission_name\r\n        launch_year\r\n        launch_success\r\n        launch_date_local\r\n        rocket {\r\n          rocket_id\r\n          rocket_name\r\n          rocket_type\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launch = () => {\r\n    let {flight_number} = useParams();\r\n    console.log(flight_number);\r\n    flight_number = parseInt(flight_number)\r\n\r\n\r\n    const {loading,error, data} = useQuery(LAUNCH_QUERY, {\r\n        variables: { flight_number },\r\n    });\r\n\r\n\r\n    if(loading) return <p>Loading...</p>\r\n    if(error) return <p>error :(</p>\r\n    const {mission_name, launch_year, launch_date_local, launch_success,\r\n            rocket:{rocket_name, rocket_type,rocket_id}} = data.launch;\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4 my-3\">\r\n     \r\n               <span className=\"text-dark\">Mission: </span> {\" \"} {mission_name}\r\n            </h1>\r\n            <h4 className=\"mb-3\">Launch Details : </h4>\r\n            <ul className=\"list-group\">\r\n   \r\n              <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n              <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n              <li className=\"list-group-item\">Launch Successful:\r\n              <span className={classNames({\r\n                  \"text-success\" : launch_success,\r\n                  \"text-danger\" : !launch_success,\r\n              })}>\r\n                  {' '} {launch_success ? \"Yes\" : \"No\"}\r\n              </span>\r\n              </li>\r\n            </ul>\r\n\r\n            <h4 className=\"my-3\">Rocket Details</h4>\r\n            <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                  <li className=\"list-group-item\">\r\n                    Rocket Name: {rocket_name}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Rocket Type: {rocket_type}\r\n                  </li>\r\n            </ul>\r\n            <hr />\r\n            <Link to=\"/\" className=\"btn btn-secondary\">\r\n                Back\r\n            </Link>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Launch;","import React from 'react';\nimport './App.css';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport logo from './logo.png'\nimport Launches from './components/Launches';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport ApolloClient from 'apollo-boost';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: 'https://apollo-graphql-react-server.herokuapp.com/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <div className=\"container\">\n        <img src={logo} alt=\"\" style={{width:300,margin:\"auto\",display:\"block\"}}/>\n        <Route exact path=\"/\" component={Launches}/>\n        <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n      </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}